plugins {
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'jacoco'
    id "org.sonarqube" version "4.3.1.3277"
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group = 'com.toomuch2learn.microservices'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        implementation 'org.yaml:snakeyaml:1.27'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:2.2.8.RELEASE' // Versión específica
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "0.8.7"
        reportsDir = file("$buildDir/reports/jacoco")
    }

    tasks.withType(Test) {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("$buildDir/reports/jacoco/html")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                            '**/*Application.class',
                            '**/*Configuration.class',
                            '**/*Test.class'
                    ])
            }))
        }
    }

    check.dependsOn jacocoTestCoverageVerification

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 85
                }
            }
        }
    }

    bootJar {
        enabled = false
    }

    bootBuildImage {
        enabled = false
    }
}
